@startuml

skinparam classAttributeIconSize 0

title Diagrama de classes

package Presentaci√≥ {
    class "CtrlPresentacio" as CPre {
        {static}+printStatsCompress(iniFileS, finFileS, speed, time, percentage)
        {static}+printStatsDecompress(iniFileS, finFileS, speed, time, percentage)
        {static}+readableFileSize(d)
    }
}

package Domini {
    enum Alg {
        LZ78d
        LZSSd
        LZWd
        JPEGd
    }
    class "CtrlDomini" as CDom {
        + Alg : Alg
        {static}+compress(alg,fileIn,fileOut,quality)
        {static}+decompress(fileIn,fileOut)
    }
    class JPEG {
        {static}+MAGIC_BYTE : byte
        - JPEG()
        {static}+compress(inputFile,outputFile,quality)
        {static}+decompress(inputFile,outputFile)
        {static}+readBlock(huffAC,huffDC,file)
        {static}-readHuffman(huff,file)
        {static}+writeBlock(encoded,huffAC,huffDC,file)
        {static}-write(value,file)
        {static}-read(length,file)
    }
    class LZ78 {
        {static}- compress_dict : HashMap<String, Integer>
        {static}- decompress_dict : HashMap<Integer, String>
        {static}+ MAGIC_BYTE : byte
        -LZ78()
        {static}+ compress(inputFilename,outputFilename)
        {static}- compress(input,output)
        {static}+ decompress(inputFilename,outputFilename)
        {static}- decompress(input,output)
        {static}- bits_needed(n)

    }
    class LZW {
        {static}+ MAGIC_BYTE : byte
        {static}-DICTIONARY_SIZE : int
        {static}-compressionDictionary : HashMap<String, Integer>
        {static}-decompressionDictionary : HashMap<Integer, String>
        -LZW()
        {static}-createCompressionDictionary()
        {static}-createDecompressionDictionary()
        {static}+ compress(inputFilename,outputFilename)
        {static}- compress(input,output)
        {static}+ decompress(inputFilename,outputFilename)
        {static}- decompress(input,output)
    }
    class LZSS {
        {static}~ slidingWindow : ArrayList<Character>
        {static}~ actualCharacters : ArrayList<Character>
        {static}~ MAX_SIZE_SW : int
        {static}~ MAX_LENGTH_COINCIDENCE : int
        {static}+ MAGIC_BYTE : byte
        -LZSS()
        {static}+ compress(inputFilename,outputFilename)
        {static}- compress(input,output)
        {static}+ decompress(inputFilename,outputFilename)
        {static}- decompress(input,output)
        {static}- computeLPSArray(lps)
        {static}- kmp()
        {static}- log2(n)
    }
    class Statistics {
        -startingTime : long
        -endingTime : long
        -iniFileSize : long
        -finFileSize : long
        +Statistics()
        +setStartingTime()
        +setEndingTime()
        +setIniFileSize(filename)
        +setFinFileSize(filename)
        +getTime()
        +getIniFileSize()
        +getFinFileSize()
        -getBytesCompressed()
        -getBytedDecompressed()
        +getPercentageCompressed()
        +getPercentageDecompressed()
        +getSpeedCompressed()
        +getSpeedDecompressed()
    }
    class IO {
    }
    class BitSetL {
        {static}- serialVersionUID : long
        -_length_ : int
        +BitSetL()
        +BitSetL(int l)
        +BitSetL(int n, int l)
        +BitSetL(String s)
        +int asInt()
        +flip()
        +set(int pos)
        +set(int pos, boolean val)
        +clear(int pos)
        +int length()
    }

    CDom o-- "1" LZ78
    CDom o-- "1" LZW
    CDom o-- "1" LZSS
    CDom o-- "1" JPEG
    CDom o-- "1" Statistics

    CPre o-- CDom

    LZ78 ..> IO
    LZSS ..> IO
    LZW ..> IO
    JPEG ..> IO

    BitSetL ..> IO
    BitSetL <.. LZ78
    BitSetL <.. LZSS
    BitSetL <.. JPEG
}

@enduml
